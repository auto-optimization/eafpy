# .github/workflows/build.yaml
name: Test
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  eafpy-lint-black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: psf/black@stable

  # eafpy-run-tests:
  #   timeout-minutes: 15
  #   needs: eafpy-lint-black
  #   if: "! contains(github.event.head_commit.message, '[skip ci]')"
  #   name: Test ${{ matrix.c.os }} (${{ matrix.c.python-version }})
  #   runs-on: ${{ matrix.c.os }}
  #   strategy:
  #     # When set to true, GitHub cancels all in-progress jobs if any matrix job fails.
  #     fail-fast: true
  #     # The maximum number of jobs that can run simultaneously
  #     max-parallel: 1
  #     matrix:
  #       c:
  #         - {os: ubuntu-latest,  python-version: '3.8'}
  #         - {os: ubuntu-latest,  python-version: '3.10'}
  #         - {os: ubuntu-latest,  python-version: '3.11'}
  #         - {os: windows-latest, python-version: '3.11'}
  #         - {os: macos-latest,   python-version: '3.11'}

  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python ${{ matrix.c.python-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.c.python-version }}
  #         cache: 'pip'
    
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         python -m pip install tox tox-gh-actions

  #     - name: Run tox
  #       run: tox
        
  #     - name: Upload coverage to Codecov
  #       if: matrix.c.os == 'ubuntu-latest' && matrix.c.python-version == '3.10' 
  #       uses: codecov/codecov-action@v3
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         fail_ci_if_error: true
  #         verbose: true
          
  # eafpy-build-package:
  #   timeout-minutes: 10
  #   needs: eafpy-run-tests
  #   if: "! contains(github.event.head_commit.message, '[skip ci]')"
  #   runs-on:  ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python-version: ["3.10"]
  #       os: [ubuntu-latest, windows-latest, macos-latest]
  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v3

  #     - name: Setup Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install dependencies
  #       run: |
  #         python3 -m pip install --upgrade pip
  #         python3 -m pip install --upgrade build

  #     - name: Build the packages
  #       run: |
  #         python3 -m build

  #     - name: Publish artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: distributions
  #         path: dist/

  eafpy-build-doc:
    timeout-minutes: 10
    # needs: eafpy-build-package
    needs: eafpy-lint-black
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    runs-on:  ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Ensure Pip and Build
        run: 
          pip install --upgrade pip
          pip install --upgrade build

      - name: build the package
        run:
          python3 -m build
      - name: install the package
        run:
          pip install .
      - name: install the doc build requirements
        run:
          pip install -r requirements_dev.txt
          
      - name: Build the docs
        run: |
          cd doc/
          make html
          cd ..

      - name: Upload docs as github pages artifact
        uses: actions/upload-pages-artifact@main
        with:
          path: doc/_build/

  eafpy-deploy-doc:
    needs: eafpy-build-doc
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Get the built docs
        uses: actions/download-artifact@v3
        with:
          name: docs

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2 


      
      


    

          
